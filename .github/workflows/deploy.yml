name: Build and Deploy to ECS

on:
  push:
    branches:
      - main

env:
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  IAM_ROLE: ${{ vars.IAM_ROLE }}
  ECS_TASK_CONTAINER_NAME: ${{ vars.ECS_TASK_CONTAINER_NAME }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}
  ECS_TASK_DEFINITION: ${{ vars.ECS_TASK_DEFINITION }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502
        with:
          role-to-assume: ${{ env.IAM_ROLE }}
          role-session-name: GitHubActionsSession
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Install CDK CLI
        run: |
          npm install -g aws-cdk

      - name: Bootstrap CDK Environment
        run: |
          cdk bootstrap aws://181945851404/${{ env.AWS_DEFAULT_REGION }} \
          --trust 181945851404 \
          --cloudformation-execution-policies arn:aws:iam::aws:policy/AdministratorAccess \
          --require-approval never

      - name: Install Dependencies for Infrastructure
        run: |
          cd infra
          npm install

      - name: Deploy CDK Stack
        run: |
          cd infra
          cdk deploy --require-approval never

      - name: Download and clean ECS task definition
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION \
          | jq '{
              family,
              taskRoleArn,
              executionRoleArn,
              networkMode,
              containerDefinitions,
              volumes,
              placementConstraints,
              requiresCompatibilities,
              cpu,
              memory
            }' > processed-task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ./processed-task-definition.json
          container-name: ${{ env.ECS_TASK_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Apply database migrations
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
        run: |
          yarn install
          yarn db:makemigrations
          yarn db:migrate
